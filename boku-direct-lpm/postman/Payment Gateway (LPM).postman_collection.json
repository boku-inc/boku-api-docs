{
	"info": {
		"_postman_id": "3eca02aa-fbd2-49fa-9b40-bb85ff198f13",
		"name": "Payment Gateway (LPM)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Behaviors",
			"item": [
				{
					"name": "Set Charge Behavior",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Sign the request",
									"eval(pm.variables.get('requestSigner')).sign()"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<charge-behavior error-code=\"0\"/>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{simulation_url}}/hosted-optin/optin-id/{{optinId}}/charge-behavior",
							"host": [
								"{{simulation_url}}"
							],
							"path": [
								"hosted-optin",
								"optin-id",
								"{{optinId}}",
								"charge-behavior"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Refund Behavior",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Sign the request",
									"eval(pm.variables.get('requestSigner')).sign()"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<refund-behavior error-code=\"0\"/>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{simulation_url}}/hosted-optin/optin-id/{{optinId}}/refund-behavior",
							"host": [
								"{{simulation_url}}"
							],
							"path": [
								"hosted-optin",
								"optin-id",
								"{{optinId}}",
								"refund-behavior"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Hosted Optin Behavior",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Sign the request",
									"eval(pm.variables.get('requestSigner')).sign()"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<hosted-optin-behavior response-code=\"0\" account-identifier=\"testIdentifier\" issuer-unique-user-id=\"testUserId\"/>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{simulation_url}}/hosted-optin/optin-id/{{optinId}}/redirect",
							"host": [
								"{{simulation_url}}"
							],
							"path": [
								"hosted-optin",
								"optin-id",
								"{{optinId}}",
								"redirect"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notifications",
			"item": [
				{
					"name": "Refund Notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment')",
									"",
									"pm.variables.set('timestamp', moment().format('YYYY-MM-DD HH:mm:ss'))",
									"pm.variables.set('refundId', randomId())",
									"pm.variables.set('merchantRefundId', randomUUID())",
									"pm.variables.set('chargeId', randomId())",
									"pm.variables.set('merchantTransactionId', randomUUID())",
									"",
									"// Sign the request",
									"eval(pm.variables.get('requestSigner')).sign()"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<refund-notification>\n    <refund>\n       <result status=\"OK\">\n          <reason-code>0</reason-code>\n          <message>Operation Successful</message>\n          <retriable>false</retriable>\n       </result>\n       <refund-status>success</refund-status>\n       <refund-id>{{refundId}}</refund-id>\n       <timestamp>{{timestamp}}</timestamp>\n       <merchant-id>{{merchantId}}</merchant-id>\n       <merchant-refund-id>{{merchantRefundId}}</merchant-refund-id>\n       <charge-id>{{chargeId}}</charge-id>\n       <reason-code>20</reason-code>\n       <country>{{country}}</country>\n       <network-id>{{network}}</network-id>\n       <currency>{{currency}}</currency>\n       <refund-amount>5.00</refund-amount>\n       <type>refund</type>\n       <merchant-transaction-id>{{merchantTransactionId}}</merchant-transaction-id>\n    </refund>\n</refund-notification>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{merchant_url}}/payment-gateway/notification/refund-notification",
							"host": [
								"{{merchant_url}}"
							],
							"path": [
								"payment-gateway",
								"notification",
								"refund-notification"
							]
						}
					},
					"response": []
				},
				{
					"name": "Charge Notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const moment = require('moment')",
									"",
									"pm.variables.set('timestamp', moment().format('YYYY-MM-DD HH:mm:ss'))",
									"pm.variables.set('chargeId', randomId())",
									"pm.variables.set('merchantTransactionId', randomUUID())",
									"",
									"// Sign the request",
									"eval(pm.variables.get('requestSigner')).sign()"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<charge-notification>\n    <charge>\n        <result status=\"OK\">\n            <reason-code>0</reason-code>\n            <message>Operation successful</message>\n            <retriable>false</retriable>\n        </result>\n        <charge-status>success</charge-status>\n        <charge-id>{{chargeId}}</charge-id>\n        <timestamp>{{timestamp}}</timestamp>\n        <merchant-id>{{merchantId}}</merchant-id>\n        <merchant-transaction-id>{{merchantTransactionId}}</merchant-transaction-id>\n        <country>{{country}}</country>\n        <network-id>{{network}}</network-id>\n        <currency>{{currency}}</currency>\n        <total-amount>5.00</total-amount>\n        <merchant-item-description>Puzzle game</merchant-item-description>\n        <merchant-data>TY235g897qWs</merchant-data>\n    </charge>\n</charge-notification>",
							"options": {
								"raw": {
									"language": "xml"
								}
							}
						},
						"url": {
							"raw": "{{merchant_url}}/payment-gateway/notification/charge-notification",
							"host": [
								"{{merchant_url}}"
							],
							"path": [
								"payment-gateway",
								"notification",
								"charge-notification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Optin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('requestId', randomRequestId())",
							"",
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code == 200) {",
							"    let responseJson = xml2Json(responseBody)['optin-response']",
							"    pm.collectionVariables.set('optinId', responseJson['optin-id'])",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<optin-request>\n    <country>{{country}}</country>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-request-id>{{requestId}}</merchant-request-id>\n    <payment-method>{{paymentMethod}}</payment-method>\n    <optin-type>hosted</optin-type>\n    <hosted>\n        <forward-url>https://www.boku.com/</forward-url>\n    </hosted>\n</optin-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/optin/3.0/optin",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"optin",
						"3.0",
						"optin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Validate Optin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('requestId', randomRequestId())",
							"",
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<validate-optin-request>\n    <country>{{country}}</country>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-request-id>{{requestId}}</merchant-request-id>\n    <optin-id>{{optinId}}</optin-id>\n    <optin-type>hosted</optin-type>\n</validate-optin-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/optin/3.0/validate-optin",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"optin",
						"3.0",
						"validate-optin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Confirm Optin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('requestId', randomRequestId())",
							"",
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<confirm-optin-request>\n    <country>{{country}}</country>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-request-id>{{requestId}}</merchant-request-id>\n    <optin-id>{{optinId}}</optin-id>\n</confirm-optin-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/optin/3.0/confirm-optin",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"optin",
						"3.0",
						"confirm-optin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel Optin",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('requestId', randomRequestId())",
							"",
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<cancel-optin-request>\n    <country>{{country}}</country>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-request-id>{{requestId}}</merchant-request-id>\n    <optin-id>{{optinId}}</optin-id>\n</cancel-optin-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/optin/3.0/cancel-optin",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"optin",
						"3.0",
						"cancel-optin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Charge",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('requestId', randomRequestId())",
							"pm.collectionVariables.set('merchantTransactionId', randomUUID())",
							"",
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code == 200) {",
							"    let responseJson = xml2Json(responseBody)['charge-response']",
							"    pm.collectionVariables.set('chargeId', responseJson['charge-id'])",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<charge-request>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-request-id>{{requestId}}</merchant-request-id>\n    <merchant-transaction-id>{{merchantTransactionId}}</merchant-transaction-id>\n    <merchant-data>TY235g897qWs</merchant-data>\n    <merchant-item-description>Puzzle game</merchant-item-description>\n    <optin-id>{{optinId}}</optin-id>\n    <currency>{{currency}}</currency>\n    <total-amount>5.00</total-amount>\n    <timeout after=\"10000\"/>\n</charge-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/billing/3.0/charge",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"billing",
						"3.0",
						"charge"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Charge",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<query-charge-request>\n    <country>{{country}}</country>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-transaction-id>{{merchantTransactionId}}</merchant-transaction-id>\n</query-charge-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/billing/3.0/query-charge",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"billing",
						"3.0",
						"query-charge"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reverse Charge",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<reverse-charge-request>\n    <country>{{country}}</country>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-request-id>{{requestId}}</merchant-request-id>\n</reverse-charge-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/billing/3.0/reverse-charge",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"billing",
						"3.0",
						"reverse-charge"
					]
				}
			},
			"response": []
		},
		{
			"name": "Begin Single Charge",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('requestId', randomRequestId())",
							"pm.collectionVariables.set('merchantTransactionId', randomUUID())",
							"",
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code == 200) {",
							"    let responseJson = xml2Json(responseBody)['begin-single-charge-response']",
							"    pm.collectionVariables.set('chargeId', responseJson['charge-id'])",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<begin-single-charge-request>\n    <country>{{country}}</country>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-request-id>{{requestId}}</merchant-request-id>\n    <merchant-transaction-id>{{merchantTransactionId}}</merchant-transaction-id>\n    <merchant-data>TY235g897qWs</merchant-data>\n    <merchant-item-description>Fun Item</merchant-item-description>\n    <currency>{{currency}}</currency>\n    <total-amount>5.00</total-amount>\n    <timeout after=\"10000\"/>\n    <payment-method>{{paymentMethod}}</payment-method>\n    <charge-type>hosted</charge-type>\n    <notification-url>https://www.boku.com/notify</notification-url>\n    <hosted>\n        <forward-url>https://www.boku.com/forward</forward-url>\n    </hosted>\n</begin-single-charge-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/billing/3.0/begin-single-charge",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"billing",
						"3.0",
						"begin-single-charge"
					]
				}
			},
			"response": []
		},
		{
			"name": "Refund Charge",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('requestId', randomRequestId())",
							"pm.collectionVariables.set('merchantRefundId', randomUUID())",
							"",
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code == 200) {",
							"    let responseJson = xml2Json(responseBody)['refund-charge-response']",
							"    pm.collectionVariables.set('refundId', responseJson['refund-id'])",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<refund-charge-request>\n    <country>{{country}}</country>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-request-id>{{requestId}}</merchant-request-id>\n    <merchant-refund-id>{{merchantRefundId}}</merchant-refund-id>\n    <charge-id>{{chargeId}}</charge-id>\n    <reason-code>20</reason-code>\n    <timeout after=\"10000\"/>\n    <skip-retry>true</skip-retry>\n    <notification send=\"true\"/>\n</refund-charge-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/billing/3.0/refund-charge",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"billing",
						"3.0",
						"refund-charge"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Refund",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Sign the request",
							"eval(pm.variables.get('requestSigner')).sign()"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<query-refund-request>\n    <country>{{country}}</country>\n    <merchant-id>{{merchantId}}</merchant-id>\n    <merchant-refund-id>{{merchantRefundId}}</merchant-refund-id>\n</query-refund-request>",
					"options": {
						"raw": {
							"language": "xml"
						}
					}
				},
				"url": {
					"raw": "{{payment_gateway_url}}/billing/3.0/query-refund",
					"host": [
						"{{payment_gateway_url}}"
					],
					"path": [
						"billing",
						"3.0",
						"query-refund"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const uuid = require('uuid')",
					"",
					"randomId = () => Math.floor(9e19 * Math.random() + 1e19)",
					"randomRequestId = () => new Date().getTime()",
					"randomUUID = () => uuid.v4()"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test('Status test', () => {",
					"    if (pm.request.method == \"POST\") {",
					"        pm.expect(pm.response.code).to.equal(200)",
					"        let responseJson = xml2Json(responseBody)",
					"        pm.expect(responseJson[Object.keys(responseJson)[0]].result.$.status).to.equal('OK')",
					"    } else {",
					"        pm.expect(pm.response.code).to.be.oneOf([200,204])",
					"    }",
					"})",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "country",
			"value": "SG"
		},
		{
			"key": "currency",
			"value": "SGD"
		},
		{
			"key": "network",
			"value": "sg-grabpay"
		},
		{
			"key": "paymentMethod",
			"value": "grabpay"
		}
	]
}
