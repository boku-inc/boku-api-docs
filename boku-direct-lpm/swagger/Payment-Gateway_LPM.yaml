---
openapi: 3.0.0
info:
  title: Boku Direct - Local Payment Methods
  description: |
    # API Security
    Security is a significant consideration for payment platforms. As part of the registration process for each
    registered merchant account, merchants receive a security key used to authenticate communications in either
    direction.

    Developers should consult the [Boku API Signature Authentication Guide](#) for additional details with respect to
    implementing security on the Boku API's.

    # API Flows
    The table below lists the typical steps in using each of the API methods. These steps are described in further
    detail throughout this reference guide.

    The general structure of the API is as follows:
    | Function | API Methods | Description |
    | -------- | ----------- | ----------- |
    | Consumer Approval | <nobr>***optin***<br/> ***validate-optin***<br/> ***confirm-optin***<br/> ***cancel-optin***</nobr> | These methods are used to obtain consumer approval to register a local payment method as a payment method. A successful optin sequence results in a registered local payment method with a merchant. |
    | Charge | <nobr>***charge***<br/> ***query-charge***<br/> ***reverse-charge***<br/> ***begin-single-charge***</nobr> | The ***charge*** method submits charges to the associated consumer account that is registered with the merchant. The ***query-charge*** and ***reverse-charge*** methods can be used in cases when the result of a prior charge is unknown. The ***begin-single-charge*** method can be used for a one-time charge not requiring a stored opt-in. |
    | Refund | <nobr>***refund-charge***<br/> ***query-refund***</nobr> | The ***refund-charge*** method provides a merchant with the ability to refund a prior charge to a consumer account. The ***query-refund*** method can be used in cases when the result of a prior refund is unknown. |
    | Notifications | <nobr>***refund-notification***<br/> ***charge-notification***</nobr> | Optional callback notifications which may be used to receive payment events asynchronously. |
  contact:
    name: Boku, Inc.
    url: https://www.boku.com/
    email: support@boku.com
  license:
    name: MIT License
    url: https://raw.githubusercontent.com/boku-inc/boku-api-docs/main/LICENSE
  version: "1.0"
servers:
  - url: https://{country}-api4-stage.boku.com
    description: Sandbox server
    variables:
      country:
        description: Country code in ISO 3166-1-alpha-2 standard
        default: JP
tags:
  - name: Consumer Approval
  - name: Charge
  - name: Refund
  - name: Notifications
paths:
  /optin/3.0/optin:
    post:
      tags:
        - Consumer Approval
      summary: Optin
      description: |
        The ***optin*** call initiates the consumer authentication process. After an ***optin*** call, an opt-in is
        usually in status `pending-validate`.

        The `optin-type`'s are:
        * `hosted` - Redirect the consumer to an issuer provided UI to perform verification

        The ***optin*** call is used in conjunction with the following related methods in order to complete consumer
        approval:
        * ***validate-optin*** - Identify and validate the billing account the consumer is registering as their payment
          method
        * ***confirm-optin*** - Confirm that the associated optin should be activated for billing
      parameters: [ ]
      requestBody:
        description: |
          **Hosted opt-in consumer redirection**

          When using an `optin-type` of `hosted`, the consumer must be redirected to the `optin-url` provided in the
          ***optin*** response. The UI presented to the consumer will guide them through the authentication process.

          Upon completing authentication, the consumer will be redirected to the `forward-url` provided in the
          ***optin*** request. A follow-up ***validate-optin*** call must be made in order to verify that the
          authentication succeeded.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/OptinRequest'
            examples:
              Hosted optin request:
                $ref: '#/components/examples/OptinRequest'
        required: true
      responses:
        "200":
          description: |
            **Result reason codes**
            |Reason code|Description|
            |-----------|-----------|
            |0  |Opt in request confirmed|
            |15 |Network is temporarily unavailable|
            |17 |Network is temporarily unavailable because it is in a scheduled downtime|
            |35 |Internal Boku error (E.g. Invalid payment method)|
            |43 |Invalid Request|
            |51 |Network not enabled on merchant|
            |86 |Network does not support the requested feature (E.g. requested opt-in method not supported)|
            |93 |Requested network is not supported by the Boku platform|
            |94 |The account is not enabled for issuer billing permanently (E.g. enterprise account)|
            |96 |The issuer rejected the charge because the user is not eligible for issuer billing (catch-all)|
            |120|Cannot determine network for the local payment method|
            |124|The given merchant-request-id has previously been used for a conflicting request (E.g. a request of a different type, a request concerning a different optin-id, or a charge request with differing charge parameters)|
            |125|The given optin-id or optin-request-id does not refer to an existent opt-in record|
            |137|A conflicting update has already been made to the given opt-in, so the request cannot be processed (E.g. attempting to confirm an already closed optin)|
            |700|Billing failed due to a handset related error|
            |803|General user-related errors|
            |900|Issuer returned a non-billing internal error|
            |901|Issuer rejected the charge because the user no longer exists on their network|
            |902|The user has exceeded their rate limit as managed by their network|
            |906|The maximum number of active optins has been reached for this user|
            *New result reason codes may be added as necessary*
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/OptinResponse'
              examples:
                "0 - Operation Successful":
                  $ref: '#/components/examples/OptinResponse'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /optin/3.0/validate-optin:
    post:
      tags:
        - Consumer Approval
      summary: Validate Optin
      description: |
        The main purpose of an opt-in is to identify and verify the payment method that the end-user wants to register.
        In the process, the user confirms that they have control over the corresponding payment method. Once an
        opt-in has begun via an ***optin*** call, the ***validate-optin*** call is used to complete this verification
        and in most cases retrieve the user details such as the account identifier.

        Specifically:
        * `hosted` - Confirm successful authentication via opt-in UI, and retrieve the account identifier of the
          user

        After a successful ***validate-optin*** call, an opt-in should usually be in status `pending-confirm` awaiting a
        call to ***confirm-optin***.
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ValidateOptinRequest'
            examples:
              Validate optin request:
                $ref: '#/components/examples/ValidateOptinRequest'
        required: true
      responses:
        "200":
          description: |
            **Result reason codes**
            |Reason code|Description|
            |-----------|-----------|
            |0  |Validate opt in request confirmed|
            |35 |Internal Boku error (E.g. Invalid payment method)|
            |43 |Invalid Request|
            |94 |The account is not enabled for issuer billing permanently (E.g. enterprise account)|
            |96 |The issuer rejected the charge because the user is not eligible for issuer billing (catch-all)|
            |124|The given merchant-request-id has previously been used for a conflicting request (E.g. a request of a different type, a request concerning a different optin-id, or a charge request with differing charge parameters)|
            |125|The given optin-id or optin-request-id does not refer to an existent opt-in record|
            |136|The consumer and therefore the referenced opt-in record is not yet verified|
            |137|A conflicting update has already been made to the given opt-in, so the request cannot be processed (E.g. attempting to confirm an already closed optin)|
            |803|General user-related errors|
            |900|Issuer returned a non-billing internal error|
            |901|Issuer rejected the charge because the user no longer exists on their network|
            *New result reason codes may be added as necessary*
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ValidateOptinResponse'
              examples:
                "0 - Operation Successful":
                  $ref: '#/components/examples/ValidateOptinResponse'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /optin/3.0/confirm-optin:
    post:
      tags:
        - Consumer Approval
      summary: Confirm Optin
      description: |
        Assuming an opt-in is in state `pending-confirm` (E.g. all necessary information about the end-user has already
        been collected), this call confirms that the opt-in should be activated for billing (after a successful call,
        `optin-status` should be `active`).
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ConfirmOptinRequest'
            examples:
              Confirm optin request:
                $ref: '#/components/examples/ConfirmOptinRequest'
        required: true
      responses:
        "200":
          description: |
            **Result reason codes**
            |Reason code|Description|
            |-----------|-----------|
            |0  |Consumer successfully validated|
            |35 |Internal Boku error (E.g. Invalid payment method)|
            |43 |Invalid Request|
            |94 |The account is not enabled for issuer billing permanently (E.g. enterprise account)|
            |96 |The issuer rejected the charge because the user is not eligible for issuer billing (catch-all)|
            |124|The given merchant-request-id has previously been used for a conflicting request (E.g. a request of a different type, a request concerning a different optin-id, or a charge request with differing charge parameters)|
            |125|The given optin-id or optin-request-id does not refer to an existent opt-in record|
            |137|A conflicting update has already been made to the given opt-in, so the request cannot be processed (E.g. attempting to confirm an already closed optin)|
            |803|General user-related errors|
            |900|Issuer returned a non-billing internal error|
            *New result reason codes may be added as necessary*
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ConfirmOptinResponse'
              examples:
                "0 - Operation Successful":
                  $ref: '#/components/examples/ConfirmOptinResponse'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /optin/3.0/cancel-optin:
    post:
      tags:
        - Consumer Approval
      summary: Cancel Optin
      description: |
        The purpose of the ***cancel-optin*** method is for deactivating the consumer’s opt-in stored by Boku and the
        issuer.

        A merchant can use this method in the following possible scenarios:
        * User contacts the merchant requesting to remove their payment method
        * Merchant determines that the consumer’s billing account has encountered a permanent error that should not be
          retried in the future

        A ***cancel-optin*** request must be sent when a user removes the payment method from the merchant account.
        Various payment methods enforce a 1:1 mapping, that is, a single payment method account can only be associated
        to a single merchant account. In the case that the merchant does not call ***cancel-optin***, a user would be
        unable to associate their payment method account with any other merchant account, even though the user has
        already requested to remove the payment method from the merchant account.

        The `optin-id` received from the ***optin*** request at the time the consumer added their payment method must be
        supplied in the ***cancel-optin*** request.
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/CancelOptinRequest'
            examples:
              Cancel optin request:
                $ref: '#/components/examples/CancelOptinRequest'
        required: true
      responses:
        "200":
          description: |
            **Result reason codes**
            |Reason code|Description|
            |-----------|-----------|
            |0  |Consumer successfully validated|
            |35 |Internal Boku error (E.g. Invalid payment method)|
            |43 |Invalid Request|
            |124|The given merchant-request-id has previously been used for a conflicting request (E.g. a request of a different type, a request concerning a different optin-id, or a charge request with differing charge parameters)|
            |125|The given optin-id or optin-request-id does not refer to an existent opt-in record|
            |137|A conflicting update has already been made to the given opt-in, so the request cannot be processed (E.g. attempting to confirm an already closed optin)|
            |900|Issuer returned a non-billing internal error|
            *New result reason codes may be added as necessary*
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/CancelOptinResponse'
              examples:
                "0 - Operation Successful":
                  $ref: '#/components/examples/CancelOptinResponse_Success'
                "125 - Optin Not Found":
                  $ref: '#/components/examples/CancelOptinResponse_Failed'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /billing/3.0/charge:
    post:
      tags:
        - Charge
      summary: Charge
      description: |
        The ***charge*** request processes a payment against a previously authorized opt-in. The `optin-id` received in
        the ***optin***/***confirm-optin*** response must be supplied in order to validate the consumer payment method.

        If the `optin-id` and the other parameters of the request are valid, the charge is submitted to the issuer for
        processing. A `charge-id` is returned in the API response.

        ***charge*** may operate as a synchronous request, fully asynchronous, or synchronous with fallback to
        asynchronous after a timeout. The `timeout` is supplied with the request, or can default to a value configurable
        for the merchant. The ***charge*** method returns a unique `charge-id` in all cases where the request has been
        accepted for processing, including success, failure, and pending cases.

        The ***charge*** method is idempotent. If the same request is sent again (with the same `merchant-request-id`),
        Boku will return the current status of the transaction.

        For example:
        * If the transaction has completed successfully, a response code of `0` will be returned
        * If the transaction has completed with a billing error, a response code of `107` will be returned
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ChargeRequest'
            examples:
              Sync charge request:
                $ref: '#/components/examples/ChargeRequest_Sync'
              Async charge request:
                $ref: '#/components/examples/ChargeRequest_Async'
              Sync charge with subscription request:
                $ref: '#/components/examples/ChargeRequest_Sync_With_Subscription'
        required: true
      responses:
        "200":
          description: |
            **Result reason codes**
            |Reason code|Description|
            |-----------|-----------|
            |0  |Charge succeeded|
            |3  |Consumer does not have enough credit to complete the transaction (issuer response)|
            |4  |The issuer system has barred this user from transacting|
            |5  |Catch-all billing failure due to an error received from the issuer|
            |6  |Transaction has closed as failed and non-billed. The transaction did not complete within the transaction timeout. This error is an indication of the reason for a transaction status, and is not used to indicate a request timeout.|
            |7  |Transaction was rejected because the user or merchant hit a boku transaction velocity limit|
            |14 |The merchant account has been suspended by Boku|
            |15 |Network is temporarily unavailable|
            |17 |Network is temporarily unavailable because it is in a scheduled downtime|
            |23 |The charge or refund is currently processing and has not yet reached a final status|
            |29 |The charge amount is not supported by the issuer|
            |35 |Internal Boku error (E.g. Invalid payment method)|
            |43 |Invalid Request|
            |51 |Network not enabled on merchant|
            |86 |Network does not support the requested feature (E.g. requested opt-in method not supported)|
            |93 |Requested network is not supported by the Boku platform|
            |94 |The account is not enabled for issuer billing permanently (E.g. enterprise account)|
            |96 |The issuer rejected the charge because the user is not eligible for issuer billing (catch-all)|
            |124|The given merchant-request-id has previously been used for a conflicting request (E.g. a request of a different type, a request concerning a different optin-id, or a charge request with differing charge parameters)|
            |125|The given optin-id or optin-request-id does not refer to an existent opt-in record|
            |126|The requested operation requires that the opt-in is in active state, but it is not|
            |154|The user has a self-imposed bar on the account|
            |155|The user is barred for non-payment|
            |156|The user has reached a regulatory spend limit (PDS2, etc). The limit may not be increased.|
            |157|The user has reached a self-imposed spend limit. The limit may be increased.|
            |158|The user has reached an issuer imposed spend limit. The limit may be increased.|
            |159|The user has reached an issuer imposed maximum spend limit. The limit may not be increased.|
            |505|Charge was rejected by the issuer due to the consumer reaching a spend limit (actual limit varies per-issuer)|
            |803|General user-related errors|
            |900|Issuer returned a non-billing internal error|
            |901|Issuer rejected the charge because the user no longer exists on their network|
            |902|The user has exceeded their rate limit as managed by their network|
            |905|User has not completed kyc (know your customer) verification with the issuer|
            *New result reason codes may be added as necessary*
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
              examples:
                "0 - Operation Successful":
                  $ref: '#/components/examples/ChargeResponse_Success'
                "23 - Submitted and in progress":
                  $ref: '#/components/examples/ChargeResponse_InProgress'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /billing/3.0/query-charge:
    post:
      tags:
        - Charge
      summary: Query Charge
      description: |
        Retrieves the status and all details of prior charges matching the given request criteria.

        Each returned charge element is similar to a ***charge*** response: although some elements are missing, all
        present elements have the same names, format and meaning as those in the original ***charge*** response.

        The ***query-charge*** API call is guaranteed to return transactions up to 1 year old. If the transaction was
        created before that period, this API may return no results.

        Criteria are evaluated in an AND fashion, E.g. if more than one field is supplied then all will be used to
        filter the returned charge elements. In normal usage this is not relevant, since you would only supply one of
        the three fields by itself.
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/QueryChargeRequest'
            examples:
              Query charge request:
                $ref: '#/components/examples/QueryChargeRequest'
        required: true
      responses:
        "200":
          description: |
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/QueryChargeResponse'
              examples:
                "0 - Single successful charge":
                  $ref: '#/components/examples/QueryChargeResponse_SingleSuccess'
                "0 - Single failed charge":
                  $ref: '#/components/examples/QueryChargeResponse_SingleFailed'
                "0 - No results":
                  $ref: '#/components/examples/QueryChargeResponse_NoResults'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /billing/3.0/reverse-charge:
    post:
      tags:
        - Charge
      summary: Reverse Charge
      description: |
        Reverses a charge request. This method is typically used when the result of a prior ***charge*** request is
        unknown.

        This can occur for a number of reasons, including:
        * Network issue
        * Request timed out by merchant
        * Response received but could not be recorded

        A reversal will be accepted and a status of `OK` returned in almost all cases, regardless of whether Boku
        actually received the original charge.

        Aside from general request validation errors, a reversal will only be rejected if the original charge request
        was issued over 1 hour previously. After the 1 hour time period has expired, reversals are no longer allowed -
        please refund the transaction if required.
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/ReverseChargeRequest'
            examples:
              Reverse charge request:
                $ref: '#/components/examples/ReverseChargeRequest'
        required: true
      responses:
        "200":
          description: |
            **Result reason codes**
            |Reason code|Description|
            |-----------|-----------|
            |0  |Charge reversal succeeded|
            |35 |Internal Boku error (E.g. Invalid payment method)|
            |43 |Invalid Request|
            |124|The given merchant-request-id has previously been used for a conflicting request (E.g. a request of a different type, a request concerning a different optin-id, or a charge request with differing charge parameters)|
            |130|Returned when a charge request is received with a merchant-request-id that has already been reversed, or when a refund of a previously reversed transaction is attempted|
            |132|The reversal validity period has expired|
            |900|Issuer returned a non-billing internal error|
            *New result reason codes may be added as necessary*
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ReverseChargeResponse'
              examples:
                "0 - Operation Successful":
                  $ref: '#/components/examples/ReverseChargeResponse'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /billing/3.0/begin-single-charge:
    post:
      tags:
        - Charge
      summary: Begin Single Charge
      description: |
        The purpose of the ***begin-single-charge*** API call is to initiate a one time charge. The
        ***begin-single-charge*** call initiates a process in which a consumer is required to authenticate themselves
        each time a purchase is requested. This API provides a payment option for consumers who choose not to save a
        payment method with the merchant.

        The Merchant can obtain information on the status of the charge made through the ***begin-single-charge*** API
        in the following ways:
        * ***query-charge*** API
        * notification to a Merchant's notification URL specified in the ***begin-single-charge*** request
      parameters: [ ]
      requestBody:
        description: |
          **Hosted begin-single-charge consumer redirection**

          When using a `charge-type` of `hosted`, the consumer must be redirected to the `redirect-url` provided in the
          ***begin-single-charge*** response. The UI presented to the consumer will guide them through the
          authentication process.

          Upon authorizing the charge, the consumer will be redirected to the forward-url provided in the
          ***begin-single-charge*** request. The merchant can then retrieve the final status of the charge either
          through a charge notification or the ***query-charge*** API.
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/BeginSingleChargeRequest'
            examples:
              Begin single charge request:
                $ref: '#/components/examples/BeginSingleChargeRequest'
        required: true
      responses:
        "200":
          description: |
            **Result reason codes**
            |Reason code|Description|
            |-----------|-----------|
            |0  |Charge succeeded|
            |3  |Consumer does not have enough credit to complete the transaction (issuer response)|
            |4  |The issuer system has barred this user from transacting|
            |5  |Catch-all billing failure due to an error received from the issuer|
            |6  |Transaction has closed as failed and non-billed. The transaction did not complete within the transaction timeout. This error is an indication of the reason for a transaction status, and is not used to indicate a request timeout.|
            |7  |Transaction was rejected because the user or merchant hit a boku transaction velocity limit|
            |14 |The merchant account has been suspended by Boku|
            |15 |Network is temporarily unavailable|
            |17 |Network is temporarily unavailable because it is in a scheduled downtime|
            |23 |The charge or refund is currently processing and has not yet reached a final status|
            |29 |The charge amount is not supported by the issuer|
            |35 |Internal Boku error (E.g. Invalid payment method)|
            |43 |Invalid Request|
            |51 |Network not enabled on merchant|
            |86 |Network does not support the requested feature (E.g. requested opt-in method not supported)|
            |93 |Requested network is not supported by the Boku platform|
            |94 |The account is not enabled for issuer billing permanently (E.g. enterprise account)|
            |96 |The issuer rejected the charge because the user is not eligible for issuer billing (catch-all)|
            |124|The given merchant-request-id has previously been used for a conflicting request (E.g. a request of a different type, a request concerning a different optin-id, or a charge request with differing charge parameters)|
            |154|The user has a self-imposed bar on the account|
            |155|The user is barred for non-payment|
            |156|The user has reached a regulatory spend limit (PDS2, etc). The limit may not be increased.|
            |157|The user has reached a self-imposed spend limit. The limit may be increased.|
            |158|The user has reached an issuer imposed spend limit. The limit may be increased.|
            |159|The user has reached an issuer imposed maximum spend limit. The limit may not be increased.|
            |505|Charge was rejected by the issuer due to the consumer reaching a spend limit (actual limit varies per-issuer)|
            |803|General user-related errors|
            |900|Issuer returned a non-billing internal error|
            |901|Issuer rejected the charge because the user no longer exists on their network|
            |902|The user has exceeded their rate limit as managed by their network|
            |905|User has not completed kyc (know your customer) verification with the issuer|
            *New result reason codes may be added as necessary*
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/BeginSingleChargeResponse'
              examples:
                "0 - Operation Successful":
                  $ref: '#/components/examples/BeginSingleChargeResponse'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /billing/3.0/refund-charge:
    post:
      tags:
        - Refund
      summary: Refund Charge
      description: |
        Refunds a confirmed payment from the consumer. The ***refund-charge*** call must provide the `charge-id` of the
        original ***charge*** being refunded and include a valid `reason-code` that matches the refund codes specified
        by Boku. The default is to refund the entire amount of the referenced charge.
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/RefundChargeRequest'
            examples:
              Refund charge request:
                $ref: '#/components/examples/RefundChargeRequest'
        required: true
      responses:
        "200":
          description: |
            **Result reason codes**
            |Reason code|Description|
            |-----------|-----------|
            |0  |Refund succeeded|
            |15 |Network is temporarily unavailable|
            |17 |Network is temporarily unavailable because it is in a scheduled downtime|
            |23 |The charge or refund is currently processing and has not yet reached a final status|
            |35 |Internal Boku error (E.g. Invalid payment method)|
            |43 |Invalid Request|
            |124|The given merchant-request-id has previously been used for a conflicting request (E.g. a request of a different type, a request concerning a different optin-id, or a charge request with differing charge parameters)|
            |131|Used to reject a reversal request in cases where the referenced transaction has already been explicitly refunded, either fully or partially|
            |133|The referenced charge-id does not exist, so cannot be refunded|
            |135|The transaction referenced by the given charge-id was not billed, so cannot be refunded|
            |140|The issuer rejected the refund, because the transaction in question has already been refunded via another source|
            |142|Based on issuer-specific restrictions, the transaction is too old to be refunded|
            |144|Catch-all for refund rejected by the issuer|
            |145|The full amount of this transaction has already been refunded, so no more refunds may be processed|
            |146|The refund amount given exceeds the remaining balance of this transaction. This may occur either because the given refund amount exceeds the amount of the transaction, or the sum total of all previous partial refunds plus the given amount exceeds the amount of the transaction.|
            |803|General user-related errors|
            |900|Issuer returned a non-billing internal error|
            |901|Issuer rejected the charge because the user no longer exists on their network|
            |902|The user has exceeded their rate limit as managed by their network|
            *New result reason codes may be added as necessary*
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/RefundChargeResponse'
              examples:
                "0 - Operation Successful":
                  $ref: '#/components/examples/RefundChargeResponse'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /billing/3.0/query-refund:
    post:
      tags:
        - Refund
      summary: Query Refund
      description: |
        Retrieves the status and all details of prior refunds matching the given request criteria.

        Each returned refund element is similar to a ***refund-charge*** response: although some elements are missing,
        all present elements have the same names, format, and meaning as those in the original ***refund-charge***
        response.

        The ***query-refund*** API call is guaranteed to return transactions up to 1 year old. If the transaction was
        created before that period, this API may return no results.

        Criteria are evaluated in an AND fashion, E.g. if more than one field is supplied then all will be used to
        filter the returned refund elements. In normal usage, this is not relevant, since you would only supply one of
        the three fields by itself.
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/QueryRefundRequest'
            examples:
              Query refund request:
                $ref: '#/components/examples/QueryRefundRequest'
        required: true
      responses:
        "200":
          description: |
          headers:
            X-SignedResponse:
              description: Signed response
              style: simple
              explode: false
              schema:
                type: string
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/QueryRefundResponse'
              examples:
                "0 - Single successful refund":
                  $ref: '#/components/examples/QueryRefundResponse_SingleSuccess'
                "0 - Single failed refund":
                  $ref: '#/components/examples/QueryRefundResponse_SingleFailed'
                "0 - No results":
                  $ref: '#/components/examples/QueryRefundResponse_NoResults'
        "401":
          description: |
            Unauthorized

            See [Boku API Signature Authentication Guide](#)
  /refund-notification:
    post:
      tags:
        - Notifications
      summary: Refund Notification
      description: |
        Boku provides merchants with the ability to receive notifications for refunds. These notifications may be used
        as an alternative to polling for refund statuses. Notifications will be sent to the merchant's notification url
        via POST.

        If the `notification → send` parameter was set to `true` in the ***refund-charge*** request, the refund
        notification will be sent on completion of all accepted refunds. This behavior means the merchant may receive a
        successful or failed refund response from the ***refund-charge*** call, and a notification for the same refund.
        These events can occur in any order, including concurrently. Furthermore, multiple notifications may be sent for
        the same refund if retries occur due to transient network errors. Therefore, notifications must be processed
        idempotently.

        A refund notification with the type `chargeback` will be sent when a user initiates a chargeback from the
        issuer. Boku will notify the merchant of the chargeback, who can then take the appropriate action against the
        user.

        If you are interested in using this feature, please reach out to our Partner Technical Support team to configure
        your notification url. One notification url can be configured per merchant-id.
      operationId: RefundNotification
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              type: object
              xml:
                name: refund-notification
            examples:
              Successful refund notification:
                value: |
                  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                  <refund-notification>
                      <refund>
                         <result status="OK">
                            <reason-code>0</reason-code>
                            <message>Operation Successful</message>
                            <retriable>false</retriable>
                         </result>
                         <refund-status>success</refund-status>
                         <refund-id>1119926629536104448</refund-id>
                         <timestamp>2021-04-06 16:27:18</timestamp>
                         <merchant-id>gatewaymerchant</merchant-id>
                         <merchant-refund-id>5853f0b3-e797-40a3-b299-1155ee7fe98d</merchant-refund-id>
                         <charge-id>72e6xii7srxdbf6ggkwkxwpk</charge-id>
                         <reason-code>20</reason-code>
                         <country>JP</country>
                         <network-id>jp-super</network-id>
                         <currency>JPY</currency>
                         <refund-amount>584.00</refund-amount>
                         <type>refund</type>
                         <merchant-transaction-id>36a91cc7-6f93-4a80-8e56-edbae7ac2157</merchant-transaction-id>
                      </refund>
                  </refund-notification>
              Failed refund notification:
                value: |
                  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                  <refund-notification>
                      <refund>
                         <result status="ERROR">
                            <reason-code>900</reason-code>
                            <message>Internal operator Error</message>
                            <retriable>false</retriable>
                         </result>
                         <refund-status>failed</refund-status>
                         <refund-id>1119926629536104448</refund-id>
                         <timestamp>2021-04-06 16:27:18</timestamp>
                         <merchant-id>gatewaymerchant</merchant-id>
                         <merchant-refund-id>5853f0b3-e797-40a3-b299-1155ee7fe98d</merchant-refund-id>
                         <charge-id>72e6xii7srxdbf6ggkwkxwpk</charge-id>
                         <reason-code>20</reason-code>
                         <country>JP</country>
                         <network-id>jp-super</network-id>
                         <currency>JPY</currency>
                         <refund-amount>584.00</refund-amount>
                         <type>refund</type>
                         <merchant-transaction-id>36a91cc7-6f93-4a80-8e56-edbae7ac2157</merchant-transaction-id>
                      </refund>
                  </refund-notification>
              Successful chargeback notification:
                value: |
                  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                  <refund-notification>
                      <refund>
                         <result status="OK">
                            <reason-code>0</reason-code>
                            <message>Operation Successful</message>
                            <retriable>false</retriable>
                         </result>
                         <refund-status>success</refund-status>
                         <refund-id>1119926629536104448</refund-id>
                         <timestamp>2021-04-06 16:27:18</timestamp>
                         <merchant-id>gatewaymerchant</merchant-id>
                         <merchant-refund-id>5853f0b3-e797-40a3-b299-1155ee7fe98d</merchant-refund-id>
                         <charge-id>72e6xii7srxdbf6ggkwkxwpk</charge-id>
                         <reason-code>20</reason-code>
                         <country>JP</country>
                         <network-id>jp-super</network-id>
                         <currency>JPY</currency>
                         <refund-amount>584.00</refund-amount>
                         <type>chargeback</type>
                         <merchant-transaction-id>36a91cc7-6f93-4a80-8e56-edbae7ac2157</merchant-transaction-id>
                      </refund>
                  </refund-notification>
        required: true
      responses:
        "200":
          description: |
            **Notification Acknowledgements**

            Once Boku has sent a notification to a merchant’s configured notification URL, the merchant must acknowledge
            (ACK) the notification after validating its content.

            Below are the steps to validate the BOKU notification:
            * Verify that the notification has been properly secured by Boku
            * Validate that the identifiers in the notification match your system (`refund-id`, `merchant-refund-id`,
              etc)

            Once you have successfully validated the notification, send a properly formatted ACK to Boku.

            **Result reason codes**

            |Status|Reason code|Description|
            |------|-----------|-----------|
            |OK    |0   |The notification was validated and accepted|
            |ERROR |35  |Internal error in the merchant system|
            |ERROR |43  |Invalid request (missing parameters, etc)|
            |ERROR |153 |The refund in the notification was not found|
            |ERROR |Anything else|Anything else|

            **Retries**

            Boku will retry the notification if the ACK response is not properly formatted or if the retriable element
            in the response is set to true. Using exponential backoff logic, the first interval between retries is 1
            minute and will increase by 1.5 times until the max interval time of 60 minutes is reached at which point
            it will continue to retry for up to 24 hours after the first notification was sent. After this time, the
            notification will not be retried again.
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: notification-response
              examples:
                Successful notification acknowledgement:
                  value: |
                    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                    <notification-response>
                        <result status="OK">
                            <reason-code>0</reason-code>
                            <message>Ack</message>
                            <retriable>false</retriable>
                        </result>
                    </notification-response>
                Retriable notification rejection:
                  value: |
                    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                    <notification-response>
                        <result status="ERROR">
                            <reason-code>35</reason-code>
                            <message>Internal Server Error</message>
                            <retriable>true</retriable>
                        </result>
                    </notification-response>
                Not retriable notification rejection:
                  value: |
                    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                    <notification-response>
                        <result status="ERROR">
                            <reason-code>153</reason-code>
                            <message>Refund not found</message>
                            <retriable>false</retriable>
                        </result>
                    </notification-response>
      servers:
        - url: "{scheme}://{host}:{port}/{path}"
          description: Merchant server to send the refund notification to
          variables:
            scheme:
              default: https
              enum:
                - http
                - https
            host:
              default: merchant.com
            port:
              default: "443"
            path: { default: "" }
  /charge-notification:
    post:
      tags:
        - Notifications
      summary: Charge Notification
      description: |
        Boku provides merchants with the ability to receive a charge notification to indicate the final status of a
        ***begin-single-charge*** call. A charge notification will only be sent if the `notification-url` parameter
        is passed in the ***begin-single-charge*** request. Notifications will be sent to the merchant's notification
        url via POST.

        The charge notification is sent when Boku receives the final status of the charge after the user authorizes the
        payment through the issuer.

        **IMPORTANT!** Charge notification functionality is only supported for charges initiated through the
        ***begin-single-charge*** call.
      operationId: ChargeNotification
      parameters: [ ]
      requestBody:
        content:
          application/xml:
            schema:
              type: object
              xml:
                name: charge-notification
            examples:
              Successful begin single charge notification:
                value: |
                  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                  <charge-notification>
                      <charge>
                          <result status="OK">
                              <reason-code>0</reason-code>
                              <message>Operation successful</message>
                              <retriable>false</retriable>
                          </result>
                          <charge-status>success</charge-status>
                          <charge-id>72ec8jnlpz3aizjpb5y3zzr5</charge-id>
                          <timestamp>2021-04-06 16:39:09</timestamp>
                          <merchant-id>gatewaymerchant</merchant-id>
                          <merchant-transaction-id>36a91cc7-6f93-4a80-8e56-edbae7ac2157</merchant-transaction-id>
                          <country>JP</country>
                          <network-id>jp-super</network-id>
                          <currency>JPY</currency>
                          <total-amount>584.00</total-amount>
                          <merchant-item-description>Puzzle game</merchant-item-description>
                          <merchant-data>TY235g897qWs</merchant-data>
                      </charge>
                  </charge-notification>
              Failed begin single charge notification:
                value: |
                  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                  <charge-notification>
                      <charge>
                          <result status="ERROR">
                              <reason-code>900</reason-code>
                              <message>Internal operator Error</message>
                              <retriable>false</retriable>
                          </result>
                          <charge-status>failed</charge-status>
                          <charge-id>72ec8jnlpz3aizjpb5y3zzr5</charge-id>
                          <timestamp>2021-04-06 16:39:09</timestamp>
                          <merchant-id>gatewaymerchant</merchant-id>
                          <merchant-transaction-id>36a91cc7-6f93-4a80-8e56-edbae7ac2157</merchant-transaction-id>
                          <country>JP</country>
                          <network-id>jp-super</network-id>
                          <currency>JPY</currency>
                          <total-amount>584.00</total-amount>
                          <merchant-item-description>Puzzle game</merchant-item-description>
                          <merchant-data>TY235g897qWs</merchant-data>
                      </charge>
                  </charge-notification>
        required: true
      responses:
        "200":
          description: |
            **Notification Acknowledgements**

            Once Boku has sent a notification to a merchant’s configured notification URL, the merchant must acknowledge
            (ACK) the notification after validating its content.

            Below are the steps to validate the BOKU notification:
            * Verify that the notification has been properly secured by Boku
            * Validate that the identifiers in the notification match your system (`charge-id`,
              `merchant-transaction-id`, etc)

            Once you have successfully validated the notification, send a properly formatted ACK to Boku.

            **Result reason codes**

            |Status|Reason code|Description|
            |------|-----------|-----------|
            |OK    |0   |The notification was validated and accepted|
            |ERROR |35  |Internal error in the merchant system|
            |ERROR |43  |Invalid request (missing parameters, etc)|
            |ERROR |Anything else|Anything else|

            **Retries**

            Boku will retry the notification if the ACK response is not properly formatted or if the retriable element
            in the response is set to true. Using exponential backoff logic, the first interval between retries is 1
            minute and will increase by 1.5 times until the max interval time of 60 minutes is reached at which point it
            will continue to retry for up to 24 hours after the first notification was sent. After this time, the
            notification will not be retried again.
          content:
            application/xml:
              schema:
                type: object
                xml:
                  name: notification-response
              examples:
                Successful notification acknowledgement:
                  value: |
                    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                    <notification-response>
                        <result status="OK">
                            <reason-code>0</reason-code>
                            <message>Ack</message>
                            <retriable>false</retriable>
                        </result>
                    </notification-response>
                Retriable notification rejection:
                  value: |
                    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                    <notification-response>
                        <result status="ERROR">
                            <reason-code>35</reason-code>
                            <message>Internal Server Error</message>
                            <retriable>true</retriable>
                        </result>
                    </notification-response>
      servers:
        - url: "{scheme}://{host}:{port}/{path}"
          description: Merchant server to send the charge notification to
          variables:
            scheme:
              default: https
              enum:
                - http
                - https
            host:
              default: merchant.com
            port:
              default: "443"
            path: { default: "" }
components:
  schemas:
    OptinRequest:
      required:
        - country
        - hosted
        - merchantId
        - merchantRequestId
        - optinType
        - paymentMethod
      type: object
      properties:
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          description: |
            Merchant assigned unique request ID

            Multiple requests received with the same request ID in this field will be handled idempotently within the
            idempotency window.
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantConsumerId:
          allOf:
            - $ref: '#/components/schemas/MerchantConsumerId'
        paymentMethod:
          allOf:
            - $ref: '#/components/schemas/PaymentMethod'
        optinType:
          allOf:
            - $ref: '#/components/schemas/OptinType'
        hosted:
          allOf:
            - $ref: '#/components/schemas/HostedRequest'
      xml:
        name: optin-request
    OptinResponse:
      required:
        - hosted
        - merchantId
        - merchantRequestId
        - optinType
        - paymentMethod
        - result
      type: object
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/Result'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        optinId:
          allOf:
            - $ref: '#/components/schemas/OptinId'
        optinState:
          allOf:
            - $ref: '#/components/schemas/OptinState'
        paymentMethod:
          allOf:
            - $ref: '#/components/schemas/PaymentMethod'
        optinType:
          allOf:
            - $ref: '#/components/schemas/OptinType'
        hosted:
          allOf:
            - $ref: '#/components/schemas/HostedResponse'
      xml:
        name: optin-response
    ValidateOptinRequest:
      required:
        - country
        - merchantId
        - merchantRequestId
        - optinType
      type: object
      properties:
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          description: |
            Merchant assigned unique request ID

            Multiple requests received with the same request ID in this field will be handled idempotently within the
            idempotency window.
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        optinId:
          allOf:
            - $ref: '#/components/schemas/OptinId'
        optinRequestId:
          allOf:
            - $ref: '#/components/schemas/OptinRequestId'
        optinType:
          description: Same as optin-type field in optin-request
          allOf:
            - $ref: '#/components/schemas/OptinType'
      xml:
        name: validate-optin-request
    ValidateOptinResponse:
      required:
        - merchantId
        - merchantRequestId
        - optinType
        - paymentMethod
        - result
      type: object
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/Result'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        optinRequestId:
          allOf:
            - $ref: '#/components/schemas/OptinRequestId'
        optinId:
          allOf:
            - $ref: '#/components/schemas/OptinId'
        optinState:
          allOf:
            - $ref: '#/components/schemas/OptinState'
        paymentMethod:
          allOf:
            - $ref: '#/components/schemas/PaymentMethod'
        optinType:
          allOf:
            - $ref: '#/components/schemas/OptinType'
      xml:
        name: validate-optin-response
    ConfirmOptinRequest:
      required:
        - country
        - merchantId
        - merchantRequestId
      type: object
      properties:
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          description: |
            Merchant assigned unique request ID

            Multiple requests received with the same request ID in this field will be handled idempotently within the
            idempotency window.
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        optinId:
          allOf:
            - $ref: '#/components/schemas/OptinId'
        optinRequestId:
          allOf:
            - $ref: '#/components/schemas/OptinRequestId'
      xml:
        name: confirm-optin-request
    ConfirmOptinResponse:
      required:
        - merchantId
        - merchantRequestId
        - optinType
        - paymentMethod
        - result
      type: object
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/Result'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        optinRequestId:
          allOf:
            - $ref: '#/components/schemas/OptinRequestId'
        optinId:
          allOf:
            - $ref: '#/components/schemas/OptinId'
        optinState:
          allOf:
            - $ref: '#/components/schemas/OptinState'
        paymentMethod:
          allOf:
            - $ref: '#/components/schemas/PaymentMethod'
        optinType:
          allOf:
            - $ref: '#/components/schemas/OptinType'
      xml:
        name: confirm-optin-response
    CancelOptinRequest:
      required:
        - country
        - merchantId
        - merchantRequestId
        - optinId
      type: object
      properties:
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          description: |
            Merchant assigned unique request ID

            Multiple requests received with the same request ID in this field will be handled idempotently within the
            idempotency window.
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        optinId:
          allOf:
            - $ref: '#/components/schemas/OptinId'
      xml:
        name: cancel-optin-request
    CancelOptinResponse:
      required:
        - merchantId
        - merchantRequestId
        - optinId
        - result
      type: object
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/Result'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        optinId:
          allOf:
            - $ref: '#/components/schemas/OptinId'
        optinType:
          allOf:
            - $ref: '#/components/schemas/OptinType'
        optinState:
          allOf:
            - $ref: '#/components/schemas/OptinState'
      xml:
        name: cancel-optin-response
    ChargeRequest:
      required:
        - currency
        - merchantId
        - merchantItemDescription
        - merchantRequestId
        - merchantTransactionId
        - optinId
        - totalAmount
      type: object
      properties:
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          description: |
            Merchant assigned unique request ID

            Multiple requests received with the same request ID in this field will be handled idempotently within the
            idempotency window.
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantTransactionId:
          description: Merchant assigned transaction ID
          xml:
            name: merchant-transaction-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantData:
          description: |
            Merchant supplied meta data

            This meta data is returned in the ***charge*** response and can be available in merchant reports.
          allOf:
            - $ref: '#/components/schemas/MerchantData'
        merchantItemDescription:
          allOf:
            - $ref: '#/components/schemas/MerchantItemDescription'
        optinId:
          allOf:
            - $ref: '#/components/schemas/OptinId'
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
        totalAmount:
          description: Total amount to charge, including tax
          xml:
            name: total-amount
          allOf:
            - $ref: '#/components/schemas/Amount'
        timeout:
          description: Specifies how long to block waiting for charge completion
          allOf:
            - $ref: '#/components/schemas/Timeout'
        consumerIpAddress:
          description: |
            IP address of consumer

            Must be IPv4 address.
          xml:
            name: customer-ip-address
          allOf:
            - $ref: '#/components/schemas/Ip4Address'
        subscription:
          allOf:
            - $ref: '#/components/schemas/Subscription'
      xml:
        name: charge-request
    ChargeResponse:
      required:
        - merchantId
        - merchantRequestId
        - optinId
        - result
      type: object
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/Result'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantTransactionId:
          description: Merchant assigned transaction ID
          xml:
            name: merchant-transaction-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantData:
          allOf:
            - $ref: '#/components/schemas/MerchantData'
        optinId:
          allOf:
            - $ref: '#/components/schemas/OptinId'
        chargeId:
          description: |
            Boku generated unique ID for each charge

            If `null`, means no charge was created, E.g. because the request was rejected
          allOf:
            - $ref: '#/components/schemas/ChargeId'
        chargeStatus:
          allOf:
            - $ref: '#/components/schemas/ChargeStatus'
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        networkId:
          allOf:
            - $ref: '#/components/schemas/NetworkId'
      xml:
        name: charge-response
    BeginSingleChargeRequest:
      required:
        - country
        - currency
        - hosted
        - merchantId
        - merchantItemDescription
        - merchantRequestId
        - paymentMethod
        - totalAmount
      type: object
      properties:
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          description: |
            Merchant assigned unique request ID

            Multiple requests received with the same request ID in this field will be handled idempotently within the
            idempotency window.
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantTransactionId:
          description: Merchant assigned transaction ID
          xml:
            name: merchant-transaction-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantData:
          description: |
            Merchant supplied meta data

            This meta data is returned in the ***charge*** response and can be available in merchant reports.
          allOf:
            - $ref: '#/components/schemas/MerchantData'
        merchantItemDescription:
          allOf:
            - $ref: '#/components/schemas/MerchantItemDescription'
        merchantConsumerId:
          allOf:
            - $ref: '#/components/schemas/MerchantConsumerId'
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
        totalAmount:
          description: Total amount to charge, including tax
          xml:
            name: total-amount
          allOf:
            - $ref: '#/components/schemas/Amount'
        timeout:
          description: Specifies how long to block waiting for charge completion
          allOf:
            - $ref: '#/components/schemas/Timeout'
        consumerIpAddress:
          description: |
            IP address of consumer

            Must be IPv4 address.
          xml:
            name: customer-ip-address
          allOf:
            - $ref: '#/components/schemas/Ip4Address'
        paymentMethod:
          allOf:
            - $ref: '#/components/schemas/PaymentMethod'
        chargeType:
          allOf:
            - $ref: '#/components/schemas/ChargeType'
        notificationUrl:
          maxLength: 255
          type: string
          description: Supplies the URL for Boku to send a notification once the charge is complete
          example: https://merchant.com/notify
          xml:
            name: notification-url
        hosted:
          allOf:
            - $ref: '#/components/schemas/HostedRequest'
      xml:
        name: begin-single-charge-request
    BeginSingleChargeResponse:
      required:
        - country
        - merchantId
        - merchantRequestId
        - paymentMethod
        - result
      type: object
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/Result'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantTransactionId:
          description: Merchant assigned transaction ID
          xml:
            name: merchant-transaction-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantData:
          allOf:
            - $ref: '#/components/schemas/MerchantData'
        chargeId:
          description: |
            Boku generated unique ID for each charge

            If `null`, means no charge was created, E.g. because the request was rejected
          allOf:
            - $ref: '#/components/schemas/ChargeId'
        chargeStatus:
          allOf:
            - $ref: '#/components/schemas/ChargeStatus'
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        paymentMethod:
          allOf:
            - $ref: '#/components/schemas/PaymentMethod'
        hosted:
          $ref: '#/components/schemas/BeginSingleChargeResponse_hosted'
      xml:
        name: begin-single-charge-response
    QueryChargeRequest:
      required:
        - country
        - merchantId
      type: object
      properties:
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        chargeId:
          description: |
            Boku generated unique ID for each charge

            Will match a single transaction.
          allOf:
            - $ref: '#/components/schemas/ChargeId'
        merchantRequestId:
          description: |
            The merchant-request-id of the original ***charge*** request

            Will match a single transaction.

            **Note**: merchant-request-id is only valid within 24 hours of the original ***charge*** request. After this
            time, it will return no results.
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantTransactionId:
          description: |
            Merchant assigned transaction ID supplied in the original ***charge*** request

            May match multiple transactions in the case where the merchant reuses merchant-transaction-ids across
            different request IDs, as Boku does not enforce uniqueness on this value.
          xml:
            name: merchant-transaction-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
      xml:
        name: query-charge-request
    QueryChargeResponse:
      required:
        - result
      type: object
      properties:
        result:
          description: Indicates the status of this query response, not the status of the charge itself
          allOf:
            - $ref: '#/components/schemas/Result'
        charges:
          minItems: 0
          type: array
          description: One entry for each matching charge
          xml:
            name: charges
            wrapped: true
          items:
            title: charge
            allOf:
              - $ref: '#/components/schemas/Charge'
      xml:
        name: query-charge-response
    ReverseChargeRequest:
      required:
        - country
        - merchantId
        - merchantRequestId
      type: object
      properties:
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          description: Merchant assigned request ID of the original ***charge*** request being reversed
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        country:
          description: Country code of the original ***charge*** request being reversed
          allOf:
            - $ref: '#/components/schemas/Country'
      xml:
        name: reverse-charge-request
    ReverseChargeResponse:
      required:
        - country
        - merchantId
        - merchantRequestId
        - result
      type: object
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/Result'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        reversalId:
          allOf:
            - $ref: '#/components/schemas/ReversalId'
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        chargeId:
          allOf:
            - $ref: '#/components/schemas/ChargeId'
      xml:
        name: reverse-charge-response
    RefundChargeRequest:
      required:
        - chargeId
        - country
        - merchantId
        - merchantRefundId
        - merchantRequestId
        - reasonCode
      type: object
      properties:
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          description: |
            Merchant assigned request ID

            Multiple requests received with the same request ID in this field will be handled idempotently within the
            idempotency window.
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        merchantRefundId:
          description: Merchant assigned refund ID
          xml:
            name: merchant-refund-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        chargeId:
          description: ID of the charge being refunded
          allOf:
            - $ref: '#/components/schemas/ChargeId'
        reasonCode:
          type: integer
          description: |
            Boku refund reason code

            |Code|Description               |
            |----|--------------------------|
            |3   |Unauthorized use - minor  |
            |8   |Non-fulfillment           |
            |19  |Unauthorized use - known  |
            |20  |Fraud                     |
            |22  |Unauthorized use - unknown|
            |23  |Goodwill                  |
          xml:
            name: reason-code
          enum:
            - 3
            - 8
            - 19
            - 20
            - 22
            - 33
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
        refundAmount:
          description: |
            Total amount to refund, including tax

            Defaults to the original ***charge*** request's `total-amount`
          xml:
            name: refund-amount
          allOf:
            - $ref: '#/components/schemas/Amount'
        timeout:
          description: Specifies how long to block waiting for refund completion
          allOf:
            - $ref: '#/components/schemas/Timeout'
        skipRetry:
          type: boolean
          description: Flag to indicate if Boku automated retry logic should be skipped for this refund
          xml:
            name: skip-retry
          default: false
        notification:
          $ref: '#/components/schemas/RefundChargeRequest_notification'
      xml:
        name: refund-charge-request
    RefundChargeResponse:
      required:
        - chargeId
        - merchantId
        - merchantRequestId
        - result
      type: object
      properties:
        result:
          allOf:
            - $ref: '#/components/schemas/Result'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRequestId:
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        chargeId:
          description: ID of the charge being refunded
          allOf:
            - $ref: '#/components/schemas/ChargeId'
        refundId:
          allOf:
            - $ref: '#/components/schemas/RefundId'
        refundStatus:
          allOf:
            - $ref: '#/components/schemas/RefundStatus'
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        networkId:
          allOf:
            - $ref: '#/components/schemas/NetworkId'
      xml:
        name: refund-charge-response
    QueryRefundRequest:
      required:
        - country
        - merchantId
      type: object
      properties:
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRefundId:
          description: |
            Merchant assigned refund ID supplied in the original ***refund-charge*** request

            May match multiple transactions in the case where the merchant reuses merchant-refund-ids across different
            request IDs, as Boku does not enforce uniqueness on this value.
          xml:
            name: merchant-refund-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        refundId:
          description: |
            The refund-id returned from the original ***refund-charge*** response

            Will match a single transaction.
          allOf:
            - $ref: '#/components/schemas/RefundId'
      xml:
        name: query-refund-request
    QueryRefundResponse:
      required:
        - result
      type: object
      properties:
        result:
          description: Indicates the status of this query response, not the status of the refund itself
          allOf:
            - $ref: '#/components/schemas/Result'
        refunds:
          minItems: 0
          type: array
          description: One entry for each matching refund
          xml:
            name: refunds
            wrapped: true
          items:
            title: refund
            allOf:
              - $ref: '#/components/schemas/Refund'
      xml:
        name: query-refund-response
    AccountIdentifier:
      maxLength: 255
      minLength: 1
      type: string
      description: |
        Free-text consumer account identifier provided by the payment provider

        This value will be recognizable to the user and might not be unique.
      example: te****st@boku.com
      xml:
        name: account-identifier
    Amount:
      minimum: 0.0001
      type: number
      description: |
        Total amount, including tax, to charge or refund

        * Precision can vary: generally zero to three digits post decimal place
        * Always uses `.` as the decimal separator
        * Do not use any thousands or other group separators
      format: double
      example: '5.00'
    Charge:
      required:
        - result
      properties:
        result:
          description: Gives detailed reason code for the status of this charge
          allOf:
            - $ref: '#/components/schemas/Result'
        chargeStatus:
          allOf:
            - $ref: '#/components/schemas/ChargeStatus'
        chargeId:
          allOf:
            - $ref: '#/components/schemas/ChargeId'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantTransactionId:
          description: Merchant assigned transaction ID
          xml:
            name: merchant-transaction-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        networkId:
          allOf:
            - $ref: '#/components/schemas/NetworkId'
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
        totalAmount:
          description: Total amount charged or attempted to charge, including tax
          xml:
            name: total-amount
          allOf:
            - $ref: '#/components/schemas/Amount'
        merchantItemDescription:
          allOf:
            - $ref: '#/components/schemas/MerchantItemDescription'
        reversal:
          description: |
            Contains information about the reversal status of this transaction

            If present, charge may be considered reversed.
            If not present, no reversal request has been received.
          allOf:
            - $ref: '#/components/schemas/Reversal'
        merchantData:
          allOf:
            - $ref: '#/components/schemas/MerchantData'
      xml:
        name: charge
    ChargeId:
      maxLength: 24
      minLength: 1
      type: string
      description: Boku assigned unique ID for each charge
      example: 72e6xii7srxdbf6ggkwkxwpk
      xml:
        name: charge-id
    ChargeStatus:
      type: string
      description: |
        Status of the charge at the time this response was returned

        * `success` - the charge completed successfully
        * `failed` - the charge failed, refer to the result reason code for failure reason
        * `in-progress` - the charge call should be re-issued with the same request ID until a final status is reached
        * `null` - no charge was created, E.g. because the request was rejected
      nullable: true
      example: success
      xml:
        name: charge-status
      enum:
        - success
        - failed
        - in-progress
        - null
    ChargeType:
      type: string
      description: Type of charge
      example: hosted
      xml:
        name: charge-type
      enum:
        - hosted
    Country:
      pattern: ^[A-Z]{2}$
      type: string
      description: Country code in ISO 3166-1-alpha-2 standard
      example: JP
      externalDocs:
        url: https://www.iso.org/iso/english_country_names_and_code_elements
      xml:
        name: country
    Currency:
      pattern: ^[A-Z]{3}$
      type: string
      description: ISO 4217 3 letter currency code
      example: JPY
      xml:
        name: currency
    HostedRequest:
      required:
        - forwardUrl
      type: object
      properties:
        forwardUrl:
          maxLength: 2048
          minLength: 1
          type: string
          description: Supplies the URL for Boku to redirect the consumer back to the merchant UI to complete authentication
          example: https://merchant.com/redirect/1617746492637
          xml:
            name: forward-url
        useMobileFlow:
          type: boolean
          description: |
            A non-mobile-optimized flow could display a QR code on the user's mobile. The user would be unable to scan
            the QR code because they are already on their mobile. A mobile-optimized flow could display a mobile login
            page to the user.

            * `true` - if a mobile-optimized optin flow should be used for this request
            * `false` - otherwise
          example: false
          xml:
            name: use-mobile-flow
          default: false
      description: Container element for parameters relevant when optin-type is `hosted`
      xml:
        name: hosted
    HostedResponse:
      required:
        - optinUrl
      type: object
      properties:
        optinUrl:
          maxLength: 2048
          minLength: 1
          type: string
          description: Boku provided URL that provides the opt-in UI for the consumer
          example: https://www.issuer.com/optin/1617746492637
          xml:
            name: optin-url
      description: Container element for parameters relevant when optin-type is `hosted`
      xml:
        name: hosted
    InvalidRequestField:
      required:
        - path
        - reason
      type: object
      properties:
        path:
          type: string
          description: |
            Property path of the field that was in error. The element or attribute name is given in camel-case, with
            nested objects delimited by `.` (period)

            If there are multiple distinct errors regarding a particular field, it may appear more than once. E.g.
            `path` is not necessarily unique.
          example: hosted
          xml:
            name: path
            attribute: true
        reason:
          type: string
          description: |
            A descriptive reason why the field was invalid. This message is not localized and so is not appropriate for
            user messaging.
          example: may not be null
          xml:
            name: reason
            attribute: true
      xml:
        name: field
    Ip4Address:
      pattern: ^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$
      type: string
      example: 1.2.3.4
    IssuerUniqueUserId:
      maxLength: 10
      minLength: 1
      type: string
      description: |
        Unique user ID provided by the payment provider

        This value could be an ID that is not recognizable to the user.
      example: cc1c4f3
      xml:
        name: issuer-unique-user-id
    MerchantConsumerId:
      maxLength: 64
      minLength: 1
      type: string
      description: Merchant assigned consumer ID
      example: "8781686"
      xml:
        name: merchant-consumer-id
    MerchantData:
      maxLength: 255
      type: string
      description: Merchant supplied meta data
      example: TY235g897qWs
      xml:
        name: merchant-data
    MerchantId:
      maxLength: 50
      minLength: 1
      type: string
      description: Boku assigned merchant ID
      example: gatewaymerchant
      xml:
        name: merchant-id
    MerchantItemDescription:
      maxLength: 255
      minLength: 1
      type: string
      description: |
        A short purchase description that appears on the consumer bill. A string longer than 20 characters will be
        truncated.
      example: Puzzle game
      xml:
        name: merchant-item-description
    MerchantRequestId:
      maxLength: 50
      minLength: 1
      type: string
      description: Merchant assigned unique request ID
      example: "1617746492637"
      xml:
        name: merchant-request-id
    NetworkId:
      maxLength: 10
      minLength: 1
      type: string
      description: The Boku internal network ID of the user
      example: jp-super
      xml:
        name: network-id
    OptinId:
      maxLength: 24
      minLength: 1
      type: string
      description: Boku assigned unique ID for each opt-in
      example: D4q4jgAAAABTRwAAAAAAAA
      xml:
        name: optin-id
    OptinRequestId:
      maxLength: 50
      minLength: 1
      type: string
      description: The merchant assigned ID used as `merchant-request-id` in the original ***optin*** call
      example: "1617746492637"
      xml:
        name: optin-request-id
    OptinState:
      required:
        - country
        - optinStatus
      type: object
      properties:
        optinStatus:
          allOf:
            - $ref: '#/components/schemas/OptinStatus'
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        networkId:
          allOf:
            - $ref: '#/components/schemas/NetworkId'
        accountIdentifier:
          allOf:
            - $ref: '#/components/schemas/AccountIdentifier'
        issuerUniqueUserId:
          allOf:
            - $ref: '#/components/schemas/IssuerUniqueUserId'
      xml:
        name: optin-state
    OptinStatus:
      type: string
      description: |
        Gives the status of the opt-in at the time this response was returned

        * `pending-validate` - the consumer's opt-in details/authenticity is not yet been validated as being correct.
          For eg we have not yet verified if the user is authenticated to perform operations with the issuer by
          redirecting to the issuer provided UI
        * `pending-confirm` - all consumer and other opt-in details are validated at this point, we are simply awaiting
          confirmation from the caller that they wish this opt-in to be active for billing
        * `active` - the opt-in completed as valid and available for billing
        * `closed` - the opt-in was closed (E.g. because of a ***cancel-optin*** call) and can no longer be used for
          charges, but may be used for refunds if it had previously been active
      example: active
      xml:
        name: optin-status
      enum:
        - pending-validate
        - pending-confirm
        - active
        - closed
    OptinType:
      type: string
      description: |
        Which method to use to perform opt-in

        * `hosted` - redirect the consumer to an issuer-provided UI to perform verification
      example: hosted
      xml:
        name: optin-type
      enum:
        - hosted
    PaymentMethod:
      type: string
      description: |
        The payment method the consumer has selected

        Each wallet provider will be its own payment method. A list of available values will be provided on demand.
      example: superwallet
      xml:
        name: payment-method
    Refund:
      required:
        - result
      properties:
        result:
          description: Gives detailed reason code for the status of this refund
          allOf:
            - $ref: '#/components/schemas/Result'
        refundStatus:
          allOf:
            - $ref: '#/components/schemas/RefundStatus'
        refundId:
          allOf:
            - $ref: '#/components/schemas/RefundId'
        timestamp:
          allOf:
            - $ref: '#/components/schemas/Timestamp'
        merchantId:
          allOf:
            - $ref: '#/components/schemas/MerchantId'
        merchantRefundId:
          description: Merchant assigned refund ID
          xml:
            name: merchant-refund-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
        chargeId:
          allOf:
            - $ref: '#/components/schemas/ChargeId'
        reasonCode:
          type: integer
          description: Boku refund reason code
          example: 20
          xml:
            name: reason-code
        country:
          allOf:
            - $ref: '#/components/schemas/Country'
        networkId:
          allOf:
            - $ref: '#/components/schemas/NetworkId'
        currency:
          allOf:
            - $ref: '#/components/schemas/Currency'
        refundAmount:
          description: Total amount refunded or attempted to refund, including tax
          xml:
            name: refund-amount
          allOf:
            - $ref: '#/components/schemas/Amount'
        type:
          allOf:
            - $ref: '#/components/schemas/RefundType'
        merchantTransactionId:
          description: |
            The merchant transaction ID of the charge being refunded if it was provided in the original charge request.
            Otherwise, the merchant request ID of the charge being refunded.
          xml:
            name: merchant-transaction-id
          allOf:
            - $ref: '#/components/schemas/MerchantRequestId'
      xml:
        name: refund
    RefundId:
      maxLength: 24
      minLength: 1
      type: string
      description: Boku assigned unique ID for each refund
      example: "1119926629536104448"
      xml:
        name: refund-id
    RefundStatus:
      type: string
      description: |
        Status of the refund at the time this response was returned

        * `success` - the refund completed successfully
        * `failed` - the refund failed, refer to the result reason code for failure reason
        * `in-progress` - the refund call should be re-issued with the same request ID until a final status is reached
        * `null` - no refund was created, E.g. because the request was rejected
      nullable: true
      example: success
      xml:
        name: refund-status
      enum:
        - success
        - failed
        - in-progress
        - null
    RefundType:
      type: string
      description: |
        Type of refund

        * `refund` - the refund was initiated by the merchant
        * `chargeback` - the refund was initiated by the issuer
      example: refund
      xml:
        name: refund-type
      enum:
        - refund
        - chargeback
    Result:
      required:
        - message
        - reasonCode
        - retriable
        - status
      type: object
      properties:
        status:
          type: string
          description: |
            * `OK` - if the request was processed successfully
            * `ERROR` - if a problem occurred while processing the request
          example: OK
          xml:
            name: status
            attribute: true
          enum:
            - OK
            - ERROR
        reasonCode:
          type: integer
          description: Provides additional information for the status
          example: 0
          xml:
            name: reason-code
        message:
          type: string
          description: Description of the reason code
          example: Operation successful
          xml:
            name: message
        retriable:
          type: boolean
          description: |
            * `true` - if the request can be retried
            * `false` - otherwise
          example: false
          xml:
            name: retriable
        retryDelay:
          type: integer
          description: Minimum milliseconds to delay before re-trying request
          example: 5000
          xml:
            name: retry-delay
        invalidRequestFields:
          minItems: 1
          type: array
          description: |
            Provides per-field error information in the case where the submitted request did not satisfy validation
            constraints
          xml:
            name: invalid-request-fields
            wrapped: true
          items:
            title: field
            allOf:
              - $ref: '#/components/schemas/InvalidRequestField'
      description: |
        The result element is defined in every response type. It is used to convey the outcome of an API request.
      xml:
        name: result
    Reversal:
      required:
        - reversalId
        - timestamp
      type: object
      properties:
        reversalId:
          allOf:
            - $ref: '#/components/schemas/ReversalId'
        timestamp:
          description: |
            Time original reverse-charge request was received ("YYYY-MM-DD hh:mm:ss")

            All timestamps are in UTC.
          allOf:
            - $ref: '#/components/schemas/Timestamp'
      xml:
        name: reversal
    ReversalId:
      maxLength: 24
      minLength: 1
      type: string
      description: Boku assigned unique ID for each reversal
      example: "1119929700437721088"
      xml:
        name: reversal-id
    Subscription:
      required:
        - isSubscription
      type: object
      properties:
        isSubscription:
          type: boolean
          description: |
            * `true` - if the charge is for a subscription
            * `false` - otherwise
          example: true
          xml:
            name: is-subscription
        period:
          $ref: '#/components/schemas/Subscription_period'
        renewal:
          type: boolean
          description: |
            * `true` - if the charge is a renewal
            * `false` - if this is the first charge in a subscription
          example: false
          xml:
            name: renewal
          default: false
      description: Container element for parameters relevant when charge is being issued as part of a subscription
      xml:
        name: subscription
    Timeout:
      required:
        - after
      type: object
      properties:
        after:
          maximum: 60000
          minimum: 0
          type: integer
          description: |
            Maximum time to block before returning a response, in milliseconds

            The value `0` means do not block, and there is no way to specify infinity.
          format: int64
          example: 10000
          xml:
            name: after
            attribute: true
      xml:
        name: timeout
    Timestamp:
      pattern: ^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$
      type: string
      description: |
        Time request was received ("YYYY-MM-DD hh:mm:ss")

        All timestamps are in UTC.
      example: "2015-03-12 04:44:16"
      xml:
        name: timestamp
    BeginSingleChargeResponse_hosted:
      required:
        - redirectUrl
      type: object
      properties:
        redirectUrl:
          maxLength: 2048
          minLength: 1
          type: string
          description: URL, where the user should be redirected to so the charge, can be authorized
          example: https://www.superwallet.com/authorize
          xml:
            name: redirect-url
      description: Provides information for proceeding with a hosted charge
      xml:
        name: hosted
    RefundChargeRequest_notification:
      required:
        - send
      properties:
        send:
          type: boolean
          description: Flag to indicate if a notification should be sent for this refund
          xml:
            name: send
            attribute: true
          default: false
      description: Element containing notification information
      xml:
        name: notification
    Subscription_period:
      required:
        - count
        - unit
      type: object
      properties:
        unit:
          type: string
          description: |
            The unit of the period

            * `day` - the subscription renews every *n* days
            * `week` - the subscription renews  every *n* weeks
            * `month` - the subscription renews  every *n* months
            * `year` - the subscription renews  every *n* years
          example: month
          xml:
            name: unit
            attribute: true
          enum:
            - day
            - week
            - month
            - year
        count:
          type: integer
          description: The count of units in the period
          example: 3
          xml:
            name: count
            attribute: true
      description: |
        The period of the subscription (at which interval the consumer is being charged)

        For example, to define a "3 month" period one would set the unit as `month` and the count as `3`.
      xml:
        name: period
  examples:
    OptinRequest:
      value:
        country: JP
        merchantId: gatewaymerchant
        merchantRequestId: 1617746492637
        paymentMethod: superwallet
        optinType: hosted
        hosted:
          forwardUrl: https://merchant.com/redirect/1617746492637
    OptinResponse:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        timestamp: "2021-04-06 15:01:34"
        merchantId: gatewaymerchant
        merchantRequestId: 1617746492637
        optinId: D4q4jgAAAABTRwAAAAAAAA
        optinState:
          optinStatus: pending-validate
          networkId: jp-super
          country: JP
        paymentMethod: superwallet
        optinType: hosted
        hosted:
          optinUrl: https://www.issuer.com/optin/1617746492637
    ValidateOptinRequest:
      value:
        country: JP
        merchantId: gatewaymerchant
        merchantRequestId: 1617746710498
        optinId: D4q4jgAAAABTRwAAAAAAAA
        optinType: hosted
    ValidateOptinResponse:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        merchantId: gatewaymerchant
        merchantRequestId: 1617746710498
        optinId: D4q4jgAAAABTRwAAAAAAAA
        optinState:
          optinStatus: pending-confirm
          networkId: jp-super
          country: JP
          accountIdentifier: te****st@boku.com
          issuerUniqueUserId: cc1c4f3
        paymentMethod: superwallet
        optinType: hosted
    ConfirmOptinRequest:
      value:
        country: JP
        merchantId: gatewaymerchant
        merchantRequestId: 1617746804587
        optinId: D4q4jgAAAABTRwAAAAAAAA
    ConfirmOptinResponse:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        timestamp: "2021-04-06 15:06:44"
        merchantId: gatewaymerchant
        merchantRequestId: 1617746804587
        optinId: D4q4jgAAAABTRwAAAAAAAA
        optinState:
          optinStatus: active
          networkId: jp-super
          country: JP
          accountIdentifier: te****st@boku.com
          issuerUniqueUserId: cc1c4f3
        paymentMethod: superwallet
        optinType: hosted
    CancelOptinRequest:
      value:
        country: JP
        merchantId: gatewaymerchant
        merchantRequestId: 1617746919170
        optinId: D4q4jgAAAABTRwAAAAAAAA
    CancelOptinResponse_Success:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        merchantId: gatewaymerchant
        merchantRequestId: 1617746919170
        optinId: D4q4jgAAAABTRwAAAAAAAA
        optinType: hosted
        optinState:
          optinStatus: closed
          networkId: jp-super
          country: JP
          accountIdentifier: te****st@boku.com
          issuerUniqueUserId: cc1c4f3
    CancelOptinResponse_Failed:
      value:
        result:
          status: ERROR
          reasonCode: 125
          message: Optin Not Found
          retriable: false
        merchantId: gatewaymerchant
        merchantRequestId: 1617746919170
        optinId: D4q4jgAAAABTRwAAAAAAAA
    ChargeRequest_Sync:
      value:
        merchantId: gatewaymerchant
        merchantRequestId: 1617747901845
        merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
        merchantData: TY235g897qWs
        merchantItemDescription: Puzzle game
        optinId: D4q4jgAAAABTRwAAAAAAAA
        currency: JPY
        totalAmount: "548.00"
        timeout:
          after: 10000
    ChargeRequest_Async:
      value:
        merchantId: gatewaymerchant
        merchantRequestId: 1617747901845
        merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
        merchantData: TY235g897qWs
        merchantItemDescription: Puzzle game
        optinId: D4q4jgAAAABTRwAAAAAAAA
        currency: JPY
        totalAmount: "548.00"
    ChargeRequest_Sync_With_Subscription:
      value:
        merchantId: gatewaymerchant
        merchantRequestId: 1617747901845
        merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
        merchantData: TY235g897qWs
        merchantItemDescription: Puzzle game
        optinId: D4q4jgAAAABTRwAAAAAAAA
        currency: JPY
        totalAmount: "548.00"
        timeout:
          after: 10000
        subscription:
          isSubscription: true
          period:
            unit: month
            count: 1
          renewal: true
    ChargeResponse_Success:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        timestamp: "2021-04-06 15:25:01"
        merchantId: gatewaymerchant
        merchantRequestId: 1617747901845
        merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
        merchantData: TY235g897qWs
        optinId: D4q4jgAAAABTRwAAAAAAAA
        chargeId: 72e6xii7srxdbf6ggkwkxwpk
        chargeStatus: success
        country: JP
        networkId: jp-super
    ChargeResponse_InProgress:
      value:
        result:
          status: OK
          reasonCode: 23
          message: Submitted and in progress
          retriable: true
          retryDelay: 5000
        timestamp: "2021-04-06 15:25:01"
        merchantId: gatewaymerchant
        merchantRequestId: 1617747901845
        merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
        merchantData: TY235g897qWs
        optinId: D4q4jgAAAABTRwAAAAAAAA
        chargeId: 72e6xii7srxdbf6ggkwkxwpk
        chargeStatus: in-progress
        country: JP
        networkId: jp-super
    QueryChargeRequest:
      value:
        country: JP
        merchantId: gatewaymerchant
        merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
    QueryChargeResponse_SingleSuccess:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Found 1 result(s)
          retriable: false
        charges:
          - result:
              status: OK
              reasonCode: 0
              message: Operation Successful
              retriable: false
            chargeStatus: successs
            chargeId: 72e6xii7srxdbf6ggkwkxwpk
            timestamp: "2021-04-06 15:25:01"
            merchantId: gatewaymerchant
            merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
            country: JP
            networkId: jp-super
            currency: JPY
            totalAmount: "548.00"
            merchantItemDescription: Puzzle game
            merchantData: TY235g897qWs
    QueryChargeResponse_SingleFailed:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Found 1 result(s)
          retriable: false
        charges:
          - result:
              status: ERROR
              reasonCode: 3
              message: Failed - Insufficient funds
              retriable: false
            chargeStatus: failed
            chargeId: 72e6xii7srxdbf6ggkwkxwpk
            timestamp: "2021-04-06 15:25:01"
            merchantId: gatewaymerchant
            merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
            country: JP
            networkId: jp-super
            currency: JPY
            totalAmount: "548.00"
            merchantItemDescription: Puzzle game
            merchantData: TY235g897qWs
    QueryChargeResponse_NoResults:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Found 0 result(s)
          retriable: false
        charges: [ ]
    ReverseChargeRequest:
      value:
        country: JP
        merchantId: gatewaymerchant
        merchantRequestId: 1617752349641
    ReverseChargeResponse:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        timestamp: "2021-04-06 16:39:13"
        merchantId: gatewaymerchant
        merchantRequestId: 1617752349641
        reversalId: 1119929700437721088
        country: JP
    BeginSingleChargeRequest:
      value:
        country: JP
        merchantId: gatewaymerchant
        merchantRequestId: 1617747901845
        merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
        merchantData: TY235g897qWs
        merchantItemDescription: Puzzle game
        currency: JPY
        totalAmount: "548.00"
        timeout:
          after: 10000
        paymentMethod: superwallet
        chargeType: hosted
        notificationUrl: https://merchant.com/notify/1617747901845
        hosted:
          forwardUrl: https://merchant.com/redirect/1617747901845
    BeginSingleChargeResponse:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        timestamp: "2021-04-06 15:25:01"
        merchantId: gatewaymerchant
        merchantRequestId: 1617747901845
        merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
        merchantData: TY235g897qWs
        chargeId: 72e6xii7srxdbf6ggkwkxwpk
        chargeStatus: success
        country: JP
        paymentMethod: superwallet
        hosted:
          redirect-url: https://www.superwallet.com/authorize
    RefundChargeRequest:
      value:
        country: JP
        merchantId: gatewaymerchant
        merchantRequestId: 1617751638628
        merchantRefundId: 5853f0b3-e797-40a3-b299-1155ee7fe98d
        chargeId: 72e6xii7srxdbf6ggkwkxwpk
        reasonCode: 20
        timeout:
          after: 10000
        skipRetry: true
        notification:
          send: true
    RefundChargeResponse:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        timestamp: "2021-04-06 16:27:18"
        merchantId: gatewaymerchant
        merchantRequestId: 1617751638628
        chargeId: 72e6xii7srxdbf6ggkwkxwpk
        refundId: 1119926629536104448
        refundStatus: success
        country: JP
        networkId: jp-super
    QueryRefundRequest:
      value:
        country: JP
        merchantId: gatewaymerchant
        merchantRefundId: 5853f0b3-e797-40a3-b299-1155ee7fe98d
    QueryRefundResponse_SingleSuccess:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        refunds:
          - result:
              status: OK
              reasonCode: 0
              message: Operation Successful
              retriable: false
            refundStatus: successs
            refundId: 1119926629536104448
            timestamp: "2021-04-06 16:27:18"
            merchantId: gatewaymerchant
            merchantRefundId: 5853f0b3-e797-40a3-b299-1155ee7fe98d
            chargeId: 72e6xii7srxdbf6ggkwkxwpk
            reasonCode: 20
            country: JP
            networkId: jp-super
            currency: JPY
            refundAmount: "548.00"
            type: refund
            merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
    QueryRefundResponse_SingleFailed:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        refunds:
          - result:
              status: ERROR
              reasonCode: 900
              message: Internal operator Error
              retriable: false
            refundStatus: failed
            refundId: 1119926629536104448
            timestamp: "2021-04-06 16:27:18"
            merchantId: gatewaymerchant
            merchantRefundId: 5853f0b3-e797-40a3-b299-1155ee7fe98d
            chargeId: 72e6xii7srxdbf6ggkwkxwpk
            reasonCode: 20
            country: JP
            networkId: jp-super
            currency: JPY
            refundAmount: "548.00"
            type: refund
            merchantTransactionId: 7dbe2a1f-b197-4390-8c8a-14d73f64a52d
    QueryRefundResponse_NoResults:
      value:
        result:
          status: OK
          reasonCode: 0
          message: Operation Successful
          retriable: false
        refunds: [ ]
